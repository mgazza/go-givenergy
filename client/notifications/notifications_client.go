// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SendNotification(params *SendNotificationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendNotificationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	SendNotification sends notification

	Sends a notification to your account on the specified platforms

# A failure indicates that the notification could not be sent to one or more of the specified platforms

To help prevent misuse of this endpoint, the values of `body` and `title` must meet the following requirements:

- They must not include any email addresses
- They must not include any telephone numbers
- They must not include any URLs (with or without `http(s)://` prefix)

As this endpoint is used and user behaviour patterns are analyzed,
the validation rules may change over time without warning to keep users safe.
If modifications to this endpoint's validation rules are made, this endpoint's documentation will be updated
and details of the change will be included in the changelog found at the bottom of this document

To help users identify the origin of notifications sent via this endpoint,
a message will be included at the end of the notification body that either states
the name of the third-party application that sent the notification or the name of the token used, whichever is applicable

Users and third-party applications found to be abusing this endpoint will have their API access revoked
*/
func (a *Client) SendNotification(params *SendNotificationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendNotification",
		Method:             "POST",
		PathPattern:        "/notification/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
