// Code generated by go-swagger; DO NOT EDIT.

package communication_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetCommunicationDeviceInformationBySerialNumberReader is a Reader for the GetCommunicationDeviceInformationBySerialNumber structure.
type GetCommunicationDeviceInformationBySerialNumberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCommunicationDeviceInformationBySerialNumberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCommunicationDeviceInformationBySerialNumberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCommunicationDeviceInformationBySerialNumberOK creates a GetCommunicationDeviceInformationBySerialNumberOK with default headers values
func NewGetCommunicationDeviceInformationBySerialNumberOK() *GetCommunicationDeviceInformationBySerialNumberOK {
	return &GetCommunicationDeviceInformationBySerialNumberOK{}
}

/*
GetCommunicationDeviceInformationBySerialNumberOK describes a response with status code 200, with default header values.

GetCommunicationDeviceInformationBySerialNumberOK get communication device information by serial number o k
*/
type GetCommunicationDeviceInformationBySerialNumberOK struct {
	Payload *GetCommunicationDeviceInformationBySerialNumberOKBody
}

// IsSuccess returns true when this get communication device information by serial number o k response has a 2xx status code
func (o *GetCommunicationDeviceInformationBySerialNumberOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get communication device information by serial number o k response has a 3xx status code
func (o *GetCommunicationDeviceInformationBySerialNumberOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get communication device information by serial number o k response has a 4xx status code
func (o *GetCommunicationDeviceInformationBySerialNumberOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get communication device information by serial number o k response has a 5xx status code
func (o *GetCommunicationDeviceInformationBySerialNumberOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get communication device information by serial number o k response a status code equal to that given
func (o *GetCommunicationDeviceInformationBySerialNumberOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get communication device information by serial number o k response
func (o *GetCommunicationDeviceInformationBySerialNumberOK) Code() int {
	return 200
}

func (o *GetCommunicationDeviceInformationBySerialNumberOK) Error() string {
	return fmt.Sprintf("[GET /communication-device/{communicationDevice_serial_number}][%d] getCommunicationDeviceInformationBySerialNumberOK  %+v", 200, o.Payload)
}

func (o *GetCommunicationDeviceInformationBySerialNumberOK) String() string {
	return fmt.Sprintf("[GET /communication-device/{communicationDevice_serial_number}][%d] getCommunicationDeviceInformationBySerialNumberOK  %+v", 200, o.Payload)
}

func (o *GetCommunicationDeviceInformationBySerialNumberOK) GetPayload() *GetCommunicationDeviceInformationBySerialNumberOKBody {
	return o.Payload
}

func (o *GetCommunicationDeviceInformationBySerialNumberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCommunicationDeviceInformationBySerialNumberOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBody get communication device information by serial number o k body
// Example: {"data":{"commission_date":"2021-01-01T00:00:00Z","inverter":{"commission_date":"2021-01-01T00:00:00Z","connections":{"batteries":[{"capacity":{"design":110,"full":110},"cell_count":16,"firmware_version":"1035","has_usb":true,"module_number":1,"nominal_voltage":51.2,"serial":"BB2345G123"}],"meters":[{"address":1,"baud_rate":9600,"hardware_version":1000,"manufacturer_code":"0000","serial_number":212345678,"software_version":1000,"type_code":1500}]},"firmware_version":{"ARM":420,"DSP":426},"flags":[],"info":{"battery":{"nominal_capacity":110,"nominal_voltage":51.2},"battery_type":"LITHIUM","max_charge_rate":2560,"model":"GIV-AC-3.0"},"last_online":"2023-01-01T00:00:00Z","last_updated":"2023-01-01T00:00:00Z","serial":"CE2345G123","status":"WAITING","warranty":{"expiry_date":"2033-01-01T00:00:00Z","type":"Standard"}},"serial_number":"WF2345G123","type":"WIFI"}}
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBody
*/
type GetCommunicationDeviceInformationBySerialNumberOKBody struct {

	// data
	Data *GetCommunicationDeviceInformationBySerialNumberOKBodyData `json:"data,omitempty"`
}

// Validate validates this get communication device information by serial number o k body
func (o *GetCommunicationDeviceInformationBySerialNumberOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get communication device information by serial number o k body based on the context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBody) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyData get communication device information by serial number o k body data
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyData
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyData struct {

	// commission date
	// Example: 2021-01-01T00:00:00Z
	CommissionDate string `json:"commission_date,omitempty"`

	// inverter
	Inverter *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter `json:"inverter,omitempty"`

	// serial number
	// Example: WF2345G123
	SerialNumber string `json:"serial_number,omitempty"`

	// type
	// Example: WIFI
	Type string `json:"type,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInverter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyData) validateInverter(formats strfmt.Registry) error {
	if swag.IsZero(o.Inverter) { // not required
		return nil
	}

	if o.Inverter != nil {
		if err := o.Inverter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get communication device information by serial number o k body data based on the context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInverter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyData) contextValidateInverter(ctx context.Context, formats strfmt.Registry) error {

	if o.Inverter != nil {
		if err := o.Inverter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyData) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter get communication device information by serial number o k body data inverter
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter struct {

	// commission date
	// Example: 2021-01-01T00:00:00Z
	CommissionDate string `json:"commission_date,omitempty"`

	// connections
	Connections *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections `json:"connections,omitempty"`

	// firmware version
	FirmwareVersion *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion `json:"firmware_version,omitempty"`

	// flags
	// Example: []
	Flags []interface{} `json:"flags"`

	// info
	Info *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo `json:"info,omitempty"`

	// last online
	// Example: 2023-01-01T00:00:00Z
	LastOnline string `json:"last_online,omitempty"`

	// last updated
	// Example: 2023-01-01T00:00:00Z
	LastUpdated string `json:"last_updated,omitempty"`

	// serial
	// Example: CE2345G123
	Serial string `json:"serial,omitempty"`

	// status
	// Example: WAITING
	Status string `json:"status,omitempty"`

	// warranty
	Warranty *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty `json:"warranty,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirmwareVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWarranty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(o.Connections) { // not required
		return nil
	}

	if o.Connections != nil {
		if err := o.Connections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections")
			}
			return err
		}
	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) validateFirmwareVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FirmwareVersion) { // not required
		return nil
	}

	if o.FirmwareVersion != nil {
		if err := o.FirmwareVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "firmware_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "firmware_version")
			}
			return err
		}
	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.Info) { // not required
		return nil
	}

	if o.Info != nil {
		if err := o.Info.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info")
			}
			return err
		}
	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) validateWarranty(formats strfmt.Registry) error {
	if swag.IsZero(o.Warranty) { // not required
		return nil
	}

	if o.Warranty != nil {
		if err := o.Warranty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "warranty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "warranty")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get communication device information by serial number o k body data inverter based on the context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFirmwareVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWarranty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	if o.Connections != nil {
		if err := o.Connections.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections")
			}
			return err
		}
	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) contextValidateFirmwareVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FirmwareVersion != nil {
		if err := o.FirmwareVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "firmware_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "firmware_version")
			}
			return err
		}
	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.Info != nil {
		if err := o.Info.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info")
			}
			return err
		}
	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) contextValidateWarranty(ctx context.Context, formats strfmt.Registry) error {

	if o.Warranty != nil {
		if err := o.Warranty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "warranty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "warranty")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections get communication device information by serial number o k body data inverter connections
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections struct {

	// batteries
	// Example: [{"capacity":{"design":110,"full":110},"cell_count":16,"firmware_version":"1035","has_usb":true,"module_number":1,"nominal_voltage":51.2,"serial":"BB2345G123"}]
	Batteries []*GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0 `json:"batteries"`

	// meters
	// Example: [{"address":1,"baud_rate":9600,"hardware_version":1000,"manufacturer_code":"0000","serial_number":212345678,"software_version":1000,"type_code":1500}]
	Meters []*GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0 `json:"meters"`
}

// Validate validates this get communication device information by serial number o k body data inverter connections
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBatteries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) validateBatteries(formats strfmt.Registry) error {
	if swag.IsZero(o.Batteries) { // not required
		return nil
	}

	for i := 0; i < len(o.Batteries); i++ {
		if swag.IsZero(o.Batteries[i]) { // not required
			continue
		}

		if o.Batteries[i] != nil {
			if err := o.Batteries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "batteries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "batteries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) validateMeters(formats strfmt.Registry) error {
	if swag.IsZero(o.Meters) { // not required
		return nil
	}

	for i := 0; i < len(o.Meters); i++ {
		if swag.IsZero(o.Meters[i]) { // not required
			continue
		}

		if o.Meters[i] != nil {
			if err := o.Meters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "meters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "meters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get communication device information by serial number o k body data inverter connections based on the context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBatteries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMeters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) contextValidateBatteries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Batteries); i++ {

		if o.Batteries[i] != nil {
			if err := o.Batteries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "batteries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "batteries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) contextValidateMeters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Meters); i++ {

		if o.Meters[i] != nil {
			if err := o.Meters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "meters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "connections" + "." + "meters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnections
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0 get communication device information by serial number o k body data inverter connections batteries items0
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0 struct {

	// capacity
	Capacity *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity `json:"capacity,omitempty"`

	// cell count
	// Example: 16
	CellCount int64 `json:"cell_count,omitempty"`

	// firmware version
	// Example: 1035
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// has usb
	// Example: true
	HasUsb bool `json:"has_usb,omitempty"`

	// module number
	// Example: 1
	ModuleNumber int64 `json:"module_number,omitempty"`

	// nominal voltage
	// Example: 51.2
	NominalVoltage float64 `json:"nominal_voltage,omitempty"`

	// serial
	// Example: BB2345G123
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter connections batteries items0
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(o.Capacity) { // not required
		return nil
	}

	if o.Capacity != nil {
		if err := o.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get communication device information by serial number o k body data inverter connections batteries items0 based on the context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if o.Capacity != nil {
		if err := o.Capacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity get communication device information by serial number o k body data inverter connections batteries items0 capacity
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity struct {

	// design
	// Example: 110
	Design int64 `json:"design,omitempty"`

	// full
	// Example: 110
	Full int64 `json:"full,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter connections batteries items0 capacity
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get communication device information by serial number o k body data inverter connections batteries items0 capacity based on context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsBatteriesItems0Capacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0 get communication device information by serial number o k body data inverter connections meters items0
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0 struct {

	// address
	// Example: 1
	Address int64 `json:"address,omitempty"`

	// baud rate
	// Example: 9600
	BaudRate int64 `json:"baud_rate,omitempty"`

	// hardware version
	// Example: 1000
	HardwareVersion int64 `json:"hardware_version,omitempty"`

	// manufacturer code
	// Example: 0000
	ManufacturerCode string `json:"manufacturer_code,omitempty"`

	// serial number
	// Example: 212345678
	SerialNumber int64 `json:"serial_number,omitempty"`

	// software version
	// Example: 1000
	SoftwareVersion int64 `json:"software_version,omitempty"`

	// type code
	// Example: 1500
	TypeCode int64 `json:"type_code,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter connections meters items0
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get communication device information by serial number o k body data inverter connections meters items0 based on context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterConnectionsMetersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion get communication device information by serial number o k body data inverter firmware version
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion struct {

	// a r m
	// Example: 420
	ARM int64 `json:"ARM,omitempty"`

	// d s p
	// Example: 426
	DSP int64 `json:"DSP,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter firmware version
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get communication device information by serial number o k body data inverter firmware version based on context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterFirmwareVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo get communication device information by serial number o k body data inverter info
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo struct {

	// battery
	Battery *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery `json:"battery,omitempty"`

	// battery type
	// Example: LITHIUM
	BatteryType string `json:"battery_type,omitempty"`

	// max charge rate
	// Example: 2560
	MaxChargeRate int64 `json:"max_charge_rate,omitempty"`

	// model
	// Example: GIV-AC-3.0
	Model string `json:"model,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter info
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(o.Battery) { // not required
		return nil
	}

	if o.Battery != nil {
		if err := o.Battery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get communication device information by serial number o k body data inverter info based on the context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if o.Battery != nil {
		if err := o.Battery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommunicationDeviceInformationBySerialNumberOK" + "." + "data" + "." + "inverter" + "." + "info" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery get communication device information by serial number o k body data inverter info battery
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery struct {

	// nominal capacity
	// Example: 110
	NominalCapacity int64 `json:"nominal_capacity,omitempty"`

	// nominal voltage
	// Example: 51.2
	NominalVoltage float64 `json:"nominal_voltage,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter info battery
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get communication device information by serial number o k body data inverter info battery based on context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterInfoBattery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty get communication device information by serial number o k body data inverter warranty
swagger:model GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty
*/
type GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty struct {

	// expiry date
	// Example: 2033-01-01T00:00:00Z
	ExpiryDate string `json:"expiry_date,omitempty"`

	// type
	// Example: Standard
	Type string `json:"type,omitempty"`
}

// Validate validates this get communication device information by serial number o k body data inverter warranty
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get communication device information by serial number o k body data inverter warranty based on context it is used
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty) UnmarshalBinary(b []byte) error {
	var res GetCommunicationDeviceInformationBySerialNumberOKBodyDataInverterWarranty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
