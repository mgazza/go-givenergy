// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAccountChildrenInformationByIDReader is a Reader for the GetAccountChildrenInformationByID structure.
type GetAccountChildrenInformationByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountChildrenInformationByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountChildrenInformationByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountChildrenInformationByIDOK creates a GetAccountChildrenInformationByIDOK with default headers values
func NewGetAccountChildrenInformationByIDOK() *GetAccountChildrenInformationByIDOK {
	return &GetAccountChildrenInformationByIDOK{}
}

/*
GetAccountChildrenInformationByIDOK describes a response with status code 200, with default header values.

GetAccountChildrenInformationByIDOK get account children information by Id o k
*/
type GetAccountChildrenInformationByIDOK struct {
	Payload *GetAccountChildrenInformationByIDOKBody
}

// IsSuccess returns true when this get account children information by Id o k response has a 2xx status code
func (o *GetAccountChildrenInformationByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get account children information by Id o k response has a 3xx status code
func (o *GetAccountChildrenInformationByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account children information by Id o k response has a 4xx status code
func (o *GetAccountChildrenInformationByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account children information by Id o k response has a 5xx status code
func (o *GetAccountChildrenInformationByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get account children information by Id o k response a status code equal to that given
func (o *GetAccountChildrenInformationByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get account children information by Id o k response
func (o *GetAccountChildrenInformationByIDOK) Code() int {
	return 200
}

func (o *GetAccountChildrenInformationByIDOK) Error() string {
	return fmt.Sprintf("[GET /account-children/{user_id}][%d] getAccountChildrenInformationByIdOK  %+v", 200, o.Payload)
}

func (o *GetAccountChildrenInformationByIDOK) String() string {
	return fmt.Sprintf("[GET /account-children/{user_id}][%d] getAccountChildrenInformationByIdOK  %+v", 200, o.Payload)
}

func (o *GetAccountChildrenInformationByIDOK) GetPayload() *GetAccountChildrenInformationByIDOKBody {
	return o.Payload
}

func (o *GetAccountChildrenInformationByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccountChildrenInformationByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAccountChildrenInformationByIDOKBody get account children information by ID o k body
// Example: {"data":[{"address":"80 Collins Land","company":null,"country":"UNITED_KINGDOM","email":"jackson.amy@owen.com","first_name":"Jessica","id":21,"name":"rose.phoebe.616","postcode":"MK9 2AD","role":"OWNER","standard_timezone":"Europe/London","surname":"King","telephone_number":"+44(0)316836121","timezone":"GMT"},{"address":"33 Sean Valley","company":null,"country":"UNITED_KINGDOM","email":"wilkinson.zach@smith.info","first_name":"Isabelle","id":22,"name":"molly.watson.814","postcode":"TW15 3EQ","role":"OWNER","standard_timezone":"Asia/Qostanay","surname":"Williams","telephone_number":975301722,"timezone":"GMT +6"}]}
swagger:model GetAccountChildrenInformationByIDOKBody
*/
type GetAccountChildrenInformationByIDOKBody struct {

	// data
	// Example: [{"address":"80 Collins Land","company":null,"country":"UNITED_KINGDOM","email":"jackson.amy@owen.com","first_name":"Jessica","id":21,"name":"rose.phoebe.616","postcode":"MK9 2AD","role":"OWNER","standard_timezone":"Europe/London","surname":"King","telephone_number":"+44(0)316836121","timezone":"GMT"},{"address":"33 Sean Valley","company":null,"country":"UNITED_KINGDOM","email":"wilkinson.zach@smith.info","first_name":"Isabelle","id":22,"name":"molly.watson.814","postcode":"TW15 3EQ","role":"OWNER","standard_timezone":"Asia/Qostanay","surname":"Williams","telephone_number":975301722,"timezone":"GMT +6"}]
	Data []*GetAccountChildrenInformationByIDOKBodyDataItems0 `json:"data"`
}

// Validate validates this get account children information by ID o k body
func (o *GetAccountChildrenInformationByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountChildrenInformationByIDOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountChildrenInformationByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAccountChildrenInformationByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get account children information by ID o k body based on the context it is used
func (o *GetAccountChildrenInformationByIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountChildrenInformationByIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountChildrenInformationByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAccountChildrenInformationByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountChildrenInformationByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountChildrenInformationByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountChildrenInformationByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountChildrenInformationByIDOKBodyDataItems0 get account children information by ID o k body data items0
swagger:model GetAccountChildrenInformationByIDOKBodyDataItems0
*/
type GetAccountChildrenInformationByIDOKBodyDataItems0 struct {

	// address
	// Example: 80 Collins Land
	Address string `json:"address,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// country
	// Example: UNITED_KINGDOM
	Country string `json:"country,omitempty"`

	// email
	// Example: jackson.amy@owen.com
	Email string `json:"email,omitempty"`

	// first name
	// Example: Jessica
	FirstName string `json:"first_name,omitempty"`

	// id
	// Example: 21
	ID int64 `json:"id,omitempty"`

	// name
	// Example: rose.phoebe.616
	Name string `json:"name,omitempty"`

	// postcode
	// Example: MK9 2AD
	Postcode string `json:"postcode,omitempty"`

	// role
	// Example: OWNER
	Role string `json:"role,omitempty"`

	// standard timezone
	// Example: Europe/London
	StandardTimezone string `json:"standard_timezone,omitempty"`

	// surname
	// Example: King
	Surname string `json:"surname,omitempty"`

	// telephone number
	// Example: +44(0)316836121
	TelephoneNumber string `json:"telephone_number,omitempty"`

	// timezone
	// Example: GMT
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this get account children information by ID o k body data items0
func (o *GetAccountChildrenInformationByIDOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account children information by ID o k body data items0 based on context it is used
func (o *GetAccountChildrenInformationByIDOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountChildrenInformationByIDOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountChildrenInformationByIDOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetAccountChildrenInformationByIDOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
