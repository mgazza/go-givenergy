// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAccountDonglesByIDReader is a Reader for the GetAccountDonglesByID structure.
type GetAccountDonglesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountDonglesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountDonglesByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /account/{user_username}/devices] getAccountDonglesByID", response, response.Code())
	}
}

// NewGetAccountDonglesByIDOK creates a GetAccountDonglesByIDOK with default headers values
func NewGetAccountDonglesByIDOK() *GetAccountDonglesByIDOK {
	return &GetAccountDonglesByIDOK{}
}

/*
GetAccountDonglesByIDOK describes a response with status code 200, with default header values.

GetAccountDonglesByIDOK get account dongles by Id o k
*/
type GetAccountDonglesByIDOK struct {
	Payload *GetAccountDonglesByIDOKBody
}

// IsSuccess returns true when this get account dongles by Id o k response has a 2xx status code
func (o *GetAccountDonglesByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get account dongles by Id o k response has a 3xx status code
func (o *GetAccountDonglesByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account dongles by Id o k response has a 4xx status code
func (o *GetAccountDonglesByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account dongles by Id o k response has a 5xx status code
func (o *GetAccountDonglesByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get account dongles by Id o k response a status code equal to that given
func (o *GetAccountDonglesByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get account dongles by Id o k response
func (o *GetAccountDonglesByIDOK) Code() int {
	return 200
}

func (o *GetAccountDonglesByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /account/{user_username}/devices][%d] getAccountDonglesByIdOK %s", 200, payload)
}

func (o *GetAccountDonglesByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /account/{user_username}/devices][%d] getAccountDonglesByIdOK %s", 200, payload)
}

func (o *GetAccountDonglesByIDOK) GetPayload() *GetAccountDonglesByIDOKBody {
	return o.Payload
}

func (o *GetAccountDonglesByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccountDonglesByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAccountDonglesByIDOKBody get account dongles by ID o k body
// Example: {"data":[{"commission_date":"1997-09-14T05:09:06Z","firmware_version":null,"inverter":{"commission_date":"1982-10-16T09:49:22Z","connections":{"batteries":[]},"firmware_version":{"ARM":null,"DSP":null},"flags":["full-power-discharge-in-eco-mode"],"info":{"battery":{"depth_of_discharge":1,"nominal_capacity":0,"nominal_voltage":0},"battery_type":"LITHIUM","max_charge_rate":0,"model":"AIO-HY-10.0"},"last_online":"2009-07-24T08:35:05Z","last_updated":"1979-07-13T19:10:18Z","serial":"IO2342Y115","status":"ERROR","warranty":{"expiry_date":"1987-10-16T09:49:22Z","type":"Standard Legacy"}},"serial_number":"GH9813D969","site_id":1,"type":"GPRS"},{"commission_date":"1976-12-13T07:02:03Z","firmware_version":null,"inverter":{"commission_date":"1991-02-25T01:10:33Z","connections":{"batteries":[]},"firmware_version":{"ARM":null,"DSP":null},"flags":["full-power-discharge-in-eco-mode"],"info":{"battery":{"depth_of_discharge":1,"nominal_capacity":200,"nominal_voltage":51.2},"battery_type":"LEAD_ACID","max_charge_rate":2560,"model":"GIV-HY-7.0-AU"},"last_online":"2007-10-07T00:24:51Z","last_updated":"2022-12-29T11:57:02Z","serial":"SR8550Q546","status":"ERROR","warranty":{"expiry_date":"1996-02-25T01:10:33Z","type":"Standard Legacy"}},"serial_number":"TN7575W487","site_id":4,"type":"WIFI"}]}
swagger:model GetAccountDonglesByIDOKBody
*/
type GetAccountDonglesByIDOKBody struct {

	// data
	// Example: [{"commission_date":"1997-09-14T05:09:06Z","firmware_version":null,"inverter":{"commission_date":"1982-10-16T09:49:22Z","connections":{"batteries":[]},"firmware_version":{"ARM":null,"DSP":null},"flags":["full-power-discharge-in-eco-mode"],"info":{"battery":{"depth_of_discharge":1,"nominal_capacity":0,"nominal_voltage":0},"battery_type":"LITHIUM","max_charge_rate":0,"model":"AIO-HY-10.0"},"last_online":"2009-07-24T08:35:05Z","last_updated":"1979-07-13T19:10:18Z","serial":"IO2342Y115","status":"ERROR","warranty":{"expiry_date":"1987-10-16T09:49:22Z","type":"Standard Legacy"}},"serial_number":"GH9813D969","site_id":1,"type":"GPRS"},{"commission_date":"1976-12-13T07:02:03Z","firmware_version":null,"inverter":{"commission_date":"1991-02-25T01:10:33Z","connections":{"batteries":[]},"firmware_version":{"ARM":null,"DSP":null},"flags":["full-power-discharge-in-eco-mode"],"info":{"battery":{"depth_of_discharge":1,"nominal_capacity":200,"nominal_voltage":51.2},"battery_type":"LEAD_ACID","max_charge_rate":2560,"model":"GIV-HY-7.0-AU"},"last_online":"2007-10-07T00:24:51Z","last_updated":"2022-12-29T11:57:02Z","serial":"SR8550Q546","status":"ERROR","warranty":{"expiry_date":"1996-02-25T01:10:33Z","type":"Standard Legacy"}},"serial_number":"TN7575W487","site_id":4,"type":"WIFI"}]
	Data []*GetAccountDonglesByIDOKBodyDataItems0 `json:"data"`
}

// Validate validates this get account dongles by ID o k body
func (o *GetAccountDonglesByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountDonglesByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAccountDonglesByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get account dongles by ID o k body based on the context it is used
func (o *GetAccountDonglesByIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountDonglesByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAccountDonglesByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0 get account dongles by ID o k body data items0
swagger:model GetAccountDonglesByIDOKBodyDataItems0
*/
type GetAccountDonglesByIDOKBodyDataItems0 struct {

	// commission date
	// Example: 1997-09-14T05:09:06Z
	CommissionDate string `json:"commission_date,omitempty"`

	// firmware version
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// inverter
	Inverter *GetAccountDonglesByIDOKBodyDataItems0Inverter `json:"inverter,omitempty"`

	// serial number
	// Example: GH9813D969
	SerialNumber string `json:"serial_number,omitempty"`

	// site id
	// Example: 1
	SiteID int64 `json:"site_id,omitempty"`

	// type
	// Example: GPRS
	Type string `json:"type,omitempty"`
}

// Validate validates this get account dongles by ID o k body data items0
func (o *GetAccountDonglesByIDOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInverter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0) validateInverter(formats strfmt.Registry) error {
	if swag.IsZero(o.Inverter) { // not required
		return nil
	}

	if o.Inverter != nil {
		if err := o.Inverter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get account dongles by ID o k body data items0 based on the context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInverter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0) contextValidateInverter(ctx context.Context, formats strfmt.Registry) error {

	if o.Inverter != nil {

		if swag.IsZero(o.Inverter) { // not required
			return nil
		}

		if err := o.Inverter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0Inverter get account dongles by ID o k body data items0 inverter
swagger:model GetAccountDonglesByIDOKBodyDataItems0Inverter
*/
type GetAccountDonglesByIDOKBodyDataItems0Inverter struct {

	// commission date
	// Example: 1982-10-16T09:49:22Z
	CommissionDate string `json:"commission_date,omitempty"`

	// connections
	Connections *GetAccountDonglesByIDOKBodyDataItems0InverterConnections `json:"connections,omitempty"`

	// firmware version
	FirmwareVersion *GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion `json:"firmware_version,omitempty"`

	// flags
	// Example: ["full-power-discharge-in-eco-mode"]
	Flags []string `json:"flags"`

	// info
	Info *GetAccountDonglesByIDOKBodyDataItems0InverterInfo `json:"info,omitempty"`

	// last online
	// Example: 2009-07-24T08:35:05Z
	LastOnline string `json:"last_online,omitempty"`

	// last updated
	// Example: 1979-07-13T19:10:18Z
	LastUpdated string `json:"last_updated,omitempty"`

	// serial
	// Example: IO2342Y115
	Serial string `json:"serial,omitempty"`

	// status
	// Example: ERROR
	Status string `json:"status,omitempty"`

	// warranty
	Warranty *GetAccountDonglesByIDOKBodyDataItems0InverterWarranty `json:"warranty,omitempty"`
}

// Validate validates this get account dongles by ID o k body data items0 inverter
func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirmwareVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWarranty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(o.Connections) { // not required
		return nil
	}

	if o.Connections != nil {
		if err := o.Connections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "connections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "connections")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) validateFirmwareVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FirmwareVersion) { // not required
		return nil
	}

	if o.FirmwareVersion != nil {
		if err := o.FirmwareVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "firmware_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "firmware_version")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.Info) { // not required
		return nil
	}

	if o.Info != nil {
		if err := o.Info.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "info")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) validateWarranty(formats strfmt.Registry) error {
	if swag.IsZero(o.Warranty) { // not required
		return nil
	}

	if o.Warranty != nil {
		if err := o.Warranty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "warranty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "warranty")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get account dongles by ID o k body data items0 inverter based on the context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFirmwareVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWarranty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	if o.Connections != nil {

		if swag.IsZero(o.Connections) { // not required
			return nil
		}

		if err := o.Connections.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "connections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "connections")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) contextValidateFirmwareVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FirmwareVersion != nil {

		if swag.IsZero(o.FirmwareVersion) { // not required
			return nil
		}

		if err := o.FirmwareVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "firmware_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "firmware_version")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.Info != nil {

		if swag.IsZero(o.Info) { // not required
			return nil
		}

		if err := o.Info.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "info")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) contextValidateWarranty(ctx context.Context, formats strfmt.Registry) error {

	if o.Warranty != nil {

		if swag.IsZero(o.Warranty) { // not required
			return nil
		}

		if err := o.Warranty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "warranty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "warranty")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0Inverter) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0Inverter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0InverterConnections get account dongles by ID o k body data items0 inverter connections
swagger:model GetAccountDonglesByIDOKBodyDataItems0InverterConnections
*/
type GetAccountDonglesByIDOKBodyDataItems0InverterConnections struct {

	// batteries
	// Example: []
	Batteries []interface{} `json:"batteries"`
}

// Validate validates this get account dongles by ID o k body data items0 inverter connections
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterConnections) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account dongles by ID o k body data items0 inverter connections based on context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterConnections) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterConnections) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterConnections) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0InverterConnections
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion get account dongles by ID o k body data items0 inverter firmware version
swagger:model GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion
*/
type GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion struct {

	// a r m
	ARM string `json:"ARM,omitempty"`

	// d s p
	DSP string `json:"DSP,omitempty"`
}

// Validate validates this get account dongles by ID o k body data items0 inverter firmware version
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account dongles by ID o k body data items0 inverter firmware version based on context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0InverterFirmwareVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0InverterInfo get account dongles by ID o k body data items0 inverter info
swagger:model GetAccountDonglesByIDOKBodyDataItems0InverterInfo
*/
type GetAccountDonglesByIDOKBodyDataItems0InverterInfo struct {

	// battery
	Battery *GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery `json:"battery,omitempty"`

	// battery type
	// Example: LITHIUM
	BatteryType string `json:"battery_type,omitempty"`

	// max charge rate
	// Example: 0
	MaxChargeRate int64 `json:"max_charge_rate,omitempty"`

	// model
	// Example: AIO-HY-10.0
	Model string `json:"model,omitempty"`
}

// Validate validates this get account dongles by ID o k body data items0 inverter info
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfo) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(o.Battery) { // not required
		return nil
	}

	if o.Battery != nil {
		if err := o.Battery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "info" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "info" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get account dongles by ID o k body data items0 inverter info based on the context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfo) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if o.Battery != nil {

		if swag.IsZero(o.Battery) { // not required
			return nil
		}

		if err := o.Battery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inverter" + "." + "info" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inverter" + "." + "info" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfo) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0InverterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery get account dongles by ID o k body data items0 inverter info battery
swagger:model GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery
*/
type GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery struct {

	// depth of discharge
	// Example: 1
	DepthOfDischarge int64 `json:"depth_of_discharge,omitempty"`

	// nominal capacity
	// Example: 0
	NominalCapacity int64 `json:"nominal_capacity,omitempty"`

	// nominal voltage
	// Example: 0
	NominalVoltage int64 `json:"nominal_voltage,omitempty"`
}

// Validate validates this get account dongles by ID o k body data items0 inverter info battery
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account dongles by ID o k body data items0 inverter info battery based on context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0InverterInfoBattery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountDonglesByIDOKBodyDataItems0InverterWarranty get account dongles by ID o k body data items0 inverter warranty
swagger:model GetAccountDonglesByIDOKBodyDataItems0InverterWarranty
*/
type GetAccountDonglesByIDOKBodyDataItems0InverterWarranty struct {

	// expiry date
	// Example: 1987-10-16T09:49:22Z
	ExpiryDate string `json:"expiry_date,omitempty"`

	// type
	// Example: Standard Legacy
	Type string `json:"type,omitempty"`
}

// Validate validates this get account dongles by ID o k body data items0 inverter warranty
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterWarranty) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account dongles by ID o k body data items0 inverter warranty based on context it is used
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterWarranty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterWarranty) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDonglesByIDOKBodyDataItems0InverterWarranty) UnmarshalBinary(b []byte) error {
	var res GetAccountDonglesByIDOKBodyDataItems0InverterWarranty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
