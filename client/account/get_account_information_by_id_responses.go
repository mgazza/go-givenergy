// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAccountInformationByIDReader is a Reader for the GetAccountInformationByID structure.
type GetAccountInformationByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountInformationByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountInformationByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountInformationByIDOK creates a GetAccountInformationByIDOK with default headers values
func NewGetAccountInformationByIDOK() *GetAccountInformationByIDOK {
	return &GetAccountInformationByIDOK{}
}

/*
GetAccountInformationByIDOK describes a response with status code 200, with default header values.

GetAccountInformationByIDOK get account information by Id o k
*/
type GetAccountInformationByIDOK struct {
	Payload *GetAccountInformationByIDOKBody
}

// IsSuccess returns true when this get account information by Id o k response has a 2xx status code
func (o *GetAccountInformationByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get account information by Id o k response has a 3xx status code
func (o *GetAccountInformationByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account information by Id o k response has a 4xx status code
func (o *GetAccountInformationByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account information by Id o k response has a 5xx status code
func (o *GetAccountInformationByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get account information by Id o k response a status code equal to that given
func (o *GetAccountInformationByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get account information by Id o k response
func (o *GetAccountInformationByIDOK) Code() int {
	return 200
}

func (o *GetAccountInformationByIDOK) Error() string {
	return fmt.Sprintf("[GET /account/{user_id}][%d] getAccountInformationByIdOK  %+v", 200, o.Payload)
}

func (o *GetAccountInformationByIDOK) String() string {
	return fmt.Sprintf("[GET /account/{user_id}][%d] getAccountInformationByIdOK  %+v", 200, o.Payload)
}

func (o *GetAccountInformationByIDOK) GetPayload() *GetAccountInformationByIDOKBody {
	return o.Payload
}

func (o *GetAccountInformationByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccountInformationByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAccountInformationByIDOKBody get account information by ID o k body
// Example: {"data":{"address":"84 John Lake","company":null,"country":"UNITED_KINGDOM","email":"wright.dylan@clark.net","first_name":"Amy","id":3,"name":"patel.joshua.941","postcode":"AB22 8ZW","role":"ENGINEER","standard_timezone":"Europe/London","surname":"Owen","telephone_number":"+44(0)0083 429653","timezone":"GMT"}}
swagger:model GetAccountInformationByIDOKBody
*/
type GetAccountInformationByIDOKBody struct {

	// data
	Data *GetAccountInformationByIDOKBodyData `json:"data,omitempty"`
}

// Validate validates this get account information by ID o k body
func (o *GetAccountInformationByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountInformationByIDOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccountInformationByIdOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAccountInformationByIdOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get account information by ID o k body based on the context it is used
func (o *GetAccountInformationByIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountInformationByIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccountInformationByIdOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAccountInformationByIdOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountInformationByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountInformationByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountInformationByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAccountInformationByIDOKBodyData get account information by ID o k body data
swagger:model GetAccountInformationByIDOKBodyData
*/
type GetAccountInformationByIDOKBodyData struct {

	// address
	// Example: 84 John Lake
	Address string `json:"address,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// country
	// Example: UNITED_KINGDOM
	Country string `json:"country,omitempty"`

	// email
	// Example: wright.dylan@clark.net
	Email string `json:"email,omitempty"`

	// first name
	// Example: Amy
	FirstName string `json:"first_name,omitempty"`

	// id
	// Example: 3
	ID int64 `json:"id,omitempty"`

	// name
	// Example: patel.joshua.941
	Name string `json:"name,omitempty"`

	// postcode
	// Example: AB22 8ZW
	Postcode string `json:"postcode,omitempty"`

	// role
	// Example: ENGINEER
	Role string `json:"role,omitempty"`

	// standard timezone
	// Example: Europe/London
	StandardTimezone string `json:"standard_timezone,omitempty"`

	// surname
	// Example: Owen
	Surname string `json:"surname,omitempty"`

	// telephone number
	// Example: +44(0)0083 429653
	TelephoneNumber string `json:"telephone_number,omitempty"`

	// timezone
	// Example: GMT
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this get account information by ID o k body data
func (o *GetAccountInformationByIDOKBodyData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get account information by ID o k body data based on context it is used
func (o *GetAccountInformationByIDOKBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountInformationByIDOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountInformationByIDOKBodyData) UnmarshalBinary(b []byte) error {
	var res GetAccountInformationByIDOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
