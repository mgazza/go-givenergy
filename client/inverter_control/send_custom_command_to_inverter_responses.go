// Code generated by go-swagger; DO NOT EDIT.

package inverter_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendCustomCommandToInverterReader is a Reader for the SendCustomCommandToInverter structure.
type SendCustomCommandToInverterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendCustomCommandToInverterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendCustomCommandToInverterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSendCustomCommandToInverterOK creates a SendCustomCommandToInverterOK with default headers values
func NewSendCustomCommandToInverterOK() *SendCustomCommandToInverterOK {
	return &SendCustomCommandToInverterOK{}
}

/*
SendCustomCommandToInverterOK describes a response with status code 200, with default header values.

failure
*/
type SendCustomCommandToInverterOK struct {
	Payload *SendCustomCommandToInverterOKBody
}

// IsSuccess returns true when this send custom command to inverter o k response has a 2xx status code
func (o *SendCustomCommandToInverterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this send custom command to inverter o k response has a 3xx status code
func (o *SendCustomCommandToInverterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send custom command to inverter o k response has a 4xx status code
func (o *SendCustomCommandToInverterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this send custom command to inverter o k response has a 5xx status code
func (o *SendCustomCommandToInverterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this send custom command to inverter o k response a status code equal to that given
func (o *SendCustomCommandToInverterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the send custom command to inverter o k response
func (o *SendCustomCommandToInverterOK) Code() int {
	return 200
}

func (o *SendCustomCommandToInverterOK) Error() string {
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/debug/transparent/send][%d] sendCustomCommandToInverterOK  %+v", 200, o.Payload)
}

func (o *SendCustomCommandToInverterOK) String() string {
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/debug/transparent/send][%d] sendCustomCommandToInverterOK  %+v", 200, o.Payload)
}

func (o *SendCustomCommandToInverterOK) GetPayload() *SendCustomCommandToInverterOKBody {
	return o.Payload
}

func (o *SendCustomCommandToInverterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendCustomCommandToInverterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SendCustomCommandToInverterBody send custom command to inverter body
swagger:model SendCustomCommandToInverterBody
*/
type SendCustomCommandToInverterBody struct {

	// The hex command to send to the inverter
	// Example: consequatur
	// Required: true
	Hex *string `json:"hex"`
}

// Validate validates this send custom command to inverter body
func (o *SendCustomCommandToInverterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendCustomCommandToInverterBody) validateHex(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"hex", "body", o.Hex); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this send custom command to inverter body based on context it is used
func (o *SendCustomCommandToInverterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendCustomCommandToInverterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCustomCommandToInverterBody) UnmarshalBinary(b []byte) error {
	var res SendCustomCommandToInverterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SendCustomCommandToInverterOKBody send custom command to inverter o k body
// Example: {"code":-1,"success":false}
swagger:model SendCustomCommandToInverterOKBody
*/
type SendCustomCommandToInverterOKBody struct {

	// code
	// Example: -1
	Code int64 `json:"code,omitempty"`

	// success
	// Example: false
	Success bool `json:"success,omitempty"`
}

// Validate validates this send custom command to inverter o k body
func (o *SendCustomCommandToInverterOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send custom command to inverter o k body based on context it is used
func (o *SendCustomCommandToInverterOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendCustomCommandToInverterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCustomCommandToInverterOKBody) UnmarshalBinary(b []byte) error {
	var res SendCustomCommandToInverterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
