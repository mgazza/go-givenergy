// Code generated by go-swagger; DO NOT EDIT.

package inverter_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModifySettingReader is a Reader for the ModifySetting structure.
type ModifySettingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ModifySettingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewModifySettingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /inverter/{inverter_serial_number}/settings/{setting_id}/write] modifySetting", response, response.Code())
	}
}

// NewModifySettingOK creates a ModifySettingOK with default headers values
func NewModifySettingOK() *ModifySettingOK {
	return &ModifySettingOK{}
}

/*
ModifySettingOK describes a response with status code 200, with default header values.

ModifySettingOK modify setting o k
*/
type ModifySettingOK struct {
	Payload *ModifySettingOKBody
}

// IsSuccess returns true when this modify setting o k response has a 2xx status code
func (o *ModifySettingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this modify setting o k response has a 3xx status code
func (o *ModifySettingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this modify setting o k response has a 4xx status code
func (o *ModifySettingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this modify setting o k response has a 5xx status code
func (o *ModifySettingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this modify setting o k response a status code equal to that given
func (o *ModifySettingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the modify setting o k response
func (o *ModifySettingOK) Code() int {
	return 200
}

func (o *ModifySettingOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/settings/{setting_id}/write][%d] modifySettingOK %s", 200, payload)
}

func (o *ModifySettingOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/settings/{setting_id}/write][%d] modifySettingOK %s", 200, payload)
}

func (o *ModifySettingOK) GetPayload() *ModifySettingOKBody {
	return o.Payload
}

func (o *ModifySettingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ModifySettingOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ModifySettingBody modify setting body
swagger:model ModifySettingBody
*/
type ModifySettingBody struct {

	// Additional context to record against this command. Appears on the remote control history in 'via'
	// Example: consequatur
	Context string `json:"context,omitempty"`

	// The value of the setting
	// Example: consequatur
	// Required: true
	Value interface{} `json:"value"`
}

// Validate validates this modify setting body
func (o *ModifySettingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ModifySettingBody) validateValue(formats strfmt.Registry) error {

	if o.Value == nil {
		return errors.Required("body"+"."+"value", "body", nil)
	}

	return nil
}

// ContextValidate validates this modify setting body based on context it is used
func (o *ModifySettingBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ModifySettingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ModifySettingBody) UnmarshalBinary(b []byte) error {
	var res ModifySettingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ModifySettingOKBody modify setting o k body
// Example: {"data":{"message":"Read Successfully","success":true,"value":"32:613"}}
swagger:model ModifySettingOKBody
*/
type ModifySettingOKBody struct {

	// data
	Data *ModifySettingOKBodyData `json:"data,omitempty"`
}

// Validate validates this modify setting o k body
func (o *ModifySettingOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ModifySettingOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifySettingOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifySettingOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this modify setting o k body based on the context it is used
func (o *ModifySettingOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ModifySettingOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifySettingOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modifySettingOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ModifySettingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ModifySettingOKBody) UnmarshalBinary(b []byte) error {
	var res ModifySettingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ModifySettingOKBodyData modify setting o k body data
swagger:model ModifySettingOKBodyData
*/
type ModifySettingOKBodyData struct {

	// message
	// Example: Read Successfully
	Message string `json:"message,omitempty"`

	// success
	// Example: true
	Success bool `json:"success,omitempty"`

	// value
	// Example: 32:613
	Value string `json:"value,omitempty"`
}

// Validate validates this modify setting o k body data
func (o *ModifySettingOKBodyData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this modify setting o k body data based on context it is used
func (o *ModifySettingOKBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ModifySettingOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ModifySettingOKBodyData) UnmarshalBinary(b []byte) error {
	var res ModifySettingOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
