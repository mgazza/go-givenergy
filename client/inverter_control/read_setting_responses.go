// Code generated by go-swagger; DO NOT EDIT.

package inverter_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReadSettingReader is a Reader for the ReadSetting structure.
type ReadSettingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadSettingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadSettingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReadSettingOK creates a ReadSettingOK with default headers values
func NewReadSettingOK() *ReadSettingOK {
	return &ReadSettingOK{}
}

/*
ReadSettingOK describes a response with status code 200, with default header values.

ReadSettingOK read setting o k
*/
type ReadSettingOK struct {
	Payload *ReadSettingOKBody
}

// IsSuccess returns true when this read setting o k response has a 2xx status code
func (o *ReadSettingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read setting o k response has a 3xx status code
func (o *ReadSettingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read setting o k response has a 4xx status code
func (o *ReadSettingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read setting o k response has a 5xx status code
func (o *ReadSettingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read setting o k response a status code equal to that given
func (o *ReadSettingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read setting o k response
func (o *ReadSettingOK) Code() int {
	return 200
}

func (o *ReadSettingOK) Error() string {
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/settings/{setting_id}/read][%d] readSettingOK  %+v", 200, o.Payload)
}

func (o *ReadSettingOK) String() string {
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/settings/{setting_id}/read][%d] readSettingOK  %+v", 200, o.Payload)
}

func (o *ReadSettingOK) GetPayload() *ReadSettingOKBody {
	return o.Payload
}

func (o *ReadSettingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ReadSettingOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ReadSettingBody read setting body
swagger:model ReadSettingBody
*/
type ReadSettingBody struct {

	// Additional context to record against this command. Appears on the remote control history in 'via'
	// Example: consequatur
	Context string `json:"context,omitempty"`
}

// Validate validates this read setting body
func (o *ReadSettingBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this read setting body based on context it is used
func (o *ReadSettingBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReadSettingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReadSettingBody) UnmarshalBinary(b []byte) error {
	var res ReadSettingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ReadSettingOKBody read setting o k body
// Example: {"data":{"value":3261.3}}
swagger:model ReadSettingOKBody
*/
type ReadSettingOKBody struct {

	// data
	Data *ReadSettingOKBodyData `json:"data,omitempty"`
}

// Validate validates this read setting o k body
func (o *ReadSettingOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReadSettingOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readSettingOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readSettingOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this read setting o k body based on the context it is used
func (o *ReadSettingOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReadSettingOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readSettingOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readSettingOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReadSettingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReadSettingOKBody) UnmarshalBinary(b []byte) error {
	var res ReadSettingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ReadSettingOKBodyData read setting o k body data
swagger:model ReadSettingOKBodyData
*/
type ReadSettingOKBodyData struct {

	// value
	// Example: 3261.3
	Value float64 `json:"value,omitempty"`
}

// Validate validates this read setting o k body data
func (o *ReadSettingOKBodyData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this read setting o k body data based on context it is used
func (o *ReadSettingOKBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReadSettingOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReadSettingOKBodyData) UnmarshalBinary(b []byte) error {
	var res ReadSettingOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
