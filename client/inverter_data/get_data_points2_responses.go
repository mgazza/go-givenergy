// Code generated by go-swagger; DO NOT EDIT.

package inverter_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDataPoints2Reader is a Reader for the GetDataPoints2 structure.
type GetDataPoints2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataPoints2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataPoints2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDataPoints2OK creates a GetDataPoints2OK with default headers values
func NewGetDataPoints2OK() *GetDataPoints2OK {
	return &GetDataPoints2OK{}
}

/*
GetDataPoints2OK describes a response with status code 200, with default header values.

GetDataPoints2OK get data points2 o k
*/
type GetDataPoints2OK struct {
	Payload *GetDataPoints2OKBody
}

// IsSuccess returns true when this get data points2 o k response has a 2xx status code
func (o *GetDataPoints2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get data points2 o k response has a 3xx status code
func (o *GetDataPoints2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get data points2 o k response has a 4xx status code
func (o *GetDataPoints2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get data points2 o k response has a 5xx status code
func (o *GetDataPoints2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get data points2 o k response a status code equal to that given
func (o *GetDataPoints2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get data points2 o k response
func (o *GetDataPoints2OK) Code() int {
	return 200
}

func (o *GetDataPoints2OK) Error() string {
	return fmt.Sprintf("[GET /inverter/{inverter_serial_number}/data-points/{date}][%d] getDataPoints2OK  %+v", 200, o.Payload)
}

func (o *GetDataPoints2OK) String() string {
	return fmt.Sprintf("[GET /inverter/{inverter_serial_number}/data-points/{date}][%d] getDataPoints2OK  %+v", 200, o.Payload)
}

func (o *GetDataPoints2OK) GetPayload() *GetDataPoints2OKBody {
	return o.Payload
}

func (o *GetDataPoints2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDataPoints2OKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDataPoints2OKBody get data points2 o k body
// Example: {"data":[{"is_metered":true,"power":{"battery":{"percent":79,"power":-2289,"temperature":12},"consumption":{"power":22636},"grid":{"current":98.1,"frequency":49.25,"power":19821,"voltage":128.3},"inverter":{"eps_power":24672,"output_frequency":49.69,"output_voltage":144.7,"power":-9476,"temperature":50},"solar":{"arrays":[{"array":1,"current":3.3,"power":491,"voltage":198.6},{"array":2,"current":10,"power":2806,"voltage":170.8}],"power":4703}},"status":"LOST","time":"1997-04-14T05:24:20Z","today":{"ac_charge":8021.5,"battery":{"charge":8691.3,"discharge":4350.4},"consumption":5673.7,"grid":{"export":5384.4,"import":3168.4},"solar":4373.9},"total":{"ac_charge":9568.8,"battery":{"charge":1034.1,"discharge":1034.1},"consumption":7757.1,"grid":{"export":7045.8,"import":4625.8},"solar":4353.3}},{"is_metered":true,"power":{"battery":{"percent":46,"power":2048,"temperature":-25.9},"consumption":{"power":46950},"grid":{"current":98.9,"frequency":50.32,"power":11311,"voltage":199.5},"inverter":{"eps_power":64789,"output_frequency":49.01,"output_voltage":144.2,"power":-1516,"temperature":28.7},"solar":{"arrays":[{"array":1,"current":4.2,"power":1656,"voltage":398.9},{"array":2,"current":14.3,"power":3881,"voltage":449.8}],"power":4065}},"status":"WARNING","time":"1971-09-15T21:08:01Z","today":{"ac_charge":6372.2,"battery":{"charge":300.3,"discharge":9962.2},"consumption":5934.1,"grid":{"export":9864.4,"import":5510.6},"solar":1149.4},"total":{"ac_charge":3627.8,"battery":{"charge":3135.4,"discharge":3135.4},"consumption":2605.4,"grid":{"export":7876.6,"import":4190},"solar":4178.8}}]}
swagger:model GetDataPoints2OKBody
*/
type GetDataPoints2OKBody struct {

	// data
	// Example: [{"is_metered":true,"power":{"battery":{"percent":79,"power":-2289,"temperature":12},"consumption":{"power":22636},"grid":{"current":98.1,"frequency":49.25,"power":19821,"voltage":128.3},"inverter":{"eps_power":24672,"output_frequency":49.69,"output_voltage":144.7,"power":-9476,"temperature":50},"solar":{"arrays":[{"array":1,"current":3.3,"power":491,"voltage":198.6},{"array":2,"current":10,"power":2806,"voltage":170.8}],"power":4703}},"status":"LOST","time":"1997-04-14T05:24:20Z","today":{"ac_charge":8021.5,"battery":{"charge":8691.3,"discharge":4350.4},"consumption":5673.7,"grid":{"export":5384.4,"import":3168.4},"solar":4373.9},"total":{"ac_charge":9568.8,"battery":{"charge":1034.1,"discharge":1034.1},"consumption":7757.1,"grid":{"export":7045.8,"import":4625.8},"solar":4353.3}},{"is_metered":true,"power":{"battery":{"percent":46,"power":2048,"temperature":-25.9},"consumption":{"power":46950},"grid":{"current":98.9,"frequency":50.32,"power":11311,"voltage":199.5},"inverter":{"eps_power":64789,"output_frequency":49.01,"output_voltage":144.2,"power":-1516,"temperature":28.7},"solar":{"arrays":[{"array":1,"current":4.2,"power":1656,"voltage":398.9},{"array":2,"current":14.3,"power":3881,"voltage":449.8}],"power":4065}},"status":"WARNING","time":"1971-09-15T21:08:01Z","today":{"ac_charge":6372.2,"battery":{"charge":300.3,"discharge":9962.2},"consumption":5934.1,"grid":{"export":9864.4,"import":5510.6},"solar":1149.4},"total":{"ac_charge":3627.8,"battery":{"charge":3135.4,"discharge":3135.4},"consumption":2605.4,"grid":{"export":7876.6,"import":4190},"solar":4178.8}}]
	Data []*GetDataPoints2OKBodyDataItems0 `json:"data"`
}

// Validate validates this get data points2 o k body
func (o *GetDataPoints2OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDataPoints2OK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDataPoints2OK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get data points2 o k body based on the context it is used
func (o *GetDataPoints2OKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDataPoints2OK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDataPoints2OK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBody) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0 get data points2 o k body data items0
swagger:model GetDataPoints2OKBodyDataItems0
*/
type GetDataPoints2OKBodyDataItems0 struct {

	// is metered
	// Example: true
	IsMetered bool `json:"is_metered,omitempty"`

	// power
	Power *GetDataPoints2OKBodyDataItems0Power `json:"power,omitempty"`

	// status
	// Example: LOST
	Status string `json:"status,omitempty"`

	// time
	// Example: 1997-04-14T05:24:20Z
	// Format: datetime
	Time strfmt.DateTime `json:"time,omitempty"`

	// today
	Today *GetDataPoints2OKBodyDataItems0Today `json:"today,omitempty"`

	// total
	Total *GetDataPoints2OKBodyDataItems0Total `json:"total,omitempty"`
}

// Validate validates this get data points2 o k body data items0
func (o *GetDataPoints2OKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePower(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToday(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) validatePower(formats strfmt.Registry) error {
	if swag.IsZero(o.Power) { // not required
		return nil
	}

	if o.Power != nil {
		if err := o.Power.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "datetime", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) validateToday(formats strfmt.Registry) error {
	if swag.IsZero(o.Today) { // not required
		return nil
	}

	if o.Today != nil {
		if err := o.Today.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("today")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("today")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) validateTotal(formats strfmt.Registry) error {
	if swag.IsZero(o.Total) { // not required
		return nil
	}

	if o.Total != nil {
		if err := o.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get data points2 o k body data items0 based on the context it is used
func (o *GetDataPoints2OKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) contextValidatePower(ctx context.Context, formats strfmt.Registry) error {

	if o.Power != nil {
		if err := o.Power.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) contextValidateToday(ctx context.Context, formats strfmt.Registry) error {

	if o.Today != nil {
		if err := o.Today.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("today")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("today")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if o.Total != nil {
		if err := o.Total.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0Power get data points2 o k body data items0 power
swagger:model GetDataPoints2OKBodyDataItems0Power
*/
type GetDataPoints2OKBodyDataItems0Power struct {

	// battery
	Battery *GetDataPoints2OKBodyDataItems0PowerBattery `json:"battery,omitempty"`

	// consumption
	Consumption *GetDataPoints2OKBodyDataItems0PowerConsumption `json:"consumption,omitempty"`

	// grid
	Grid *GetDataPoints2OKBodyDataItems0PowerGrid `json:"grid,omitempty"`

	// inverter
	Inverter *GetDataPoints2OKBodyDataItems0PowerInverter `json:"inverter,omitempty"`

	// solar
	Solar *GetDataPoints2OKBodyDataItems0PowerSolar `json:"solar,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power
func (o *GetDataPoints2OKBodyDataItems0Power) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInverter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolar(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(o.Battery) { // not required
		return nil
	}

	if o.Battery != nil {
		if err := o.Battery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) validateConsumption(formats strfmt.Registry) error {
	if swag.IsZero(o.Consumption) { // not required
		return nil
	}

	if o.Consumption != nil {
		if err := o.Consumption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "consumption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "consumption")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) validateGrid(formats strfmt.Registry) error {
	if swag.IsZero(o.Grid) { // not required
		return nil
	}

	if o.Grid != nil {
		if err := o.Grid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "grid")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) validateInverter(formats strfmt.Registry) error {
	if swag.IsZero(o.Inverter) { // not required
		return nil
	}

	if o.Inverter != nil {
		if err := o.Inverter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "inverter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "inverter")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) validateSolar(formats strfmt.Registry) error {
	if swag.IsZero(o.Solar) { // not required
		return nil
	}

	if o.Solar != nil {
		if err := o.Solar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "solar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "solar")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get data points2 o k body data items0 power based on the context it is used
func (o *GetDataPoints2OKBodyDataItems0Power) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConsumption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGrid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInverter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSolar(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if o.Battery != nil {
		if err := o.Battery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) contextValidateConsumption(ctx context.Context, formats strfmt.Registry) error {

	if o.Consumption != nil {
		if err := o.Consumption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "consumption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "consumption")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) contextValidateGrid(ctx context.Context, formats strfmt.Registry) error {

	if o.Grid != nil {
		if err := o.Grid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "grid")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) contextValidateInverter(ctx context.Context, formats strfmt.Registry) error {

	if o.Inverter != nil {
		if err := o.Inverter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "inverter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "inverter")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Power) contextValidateSolar(ctx context.Context, formats strfmt.Registry) error {

	if o.Solar != nil {
		if err := o.Solar.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "solar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "solar")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0Power) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0Power) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0Power
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0PowerBattery get data points2 o k body data items0 power battery
swagger:model GetDataPoints2OKBodyDataItems0PowerBattery
*/
type GetDataPoints2OKBodyDataItems0PowerBattery struct {

	// percent
	// Example: 79
	Percent int64 `json:"percent,omitempty"`

	// power
	// Example: -2289
	Power int64 `json:"power,omitempty"`

	// temperature
	// Example: 12
	Temperature float64 `json:"temperature,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power battery
func (o *GetDataPoints2OKBodyDataItems0PowerBattery) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 power battery based on context it is used
func (o *GetDataPoints2OKBodyDataItems0PowerBattery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerBattery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerBattery) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0PowerBattery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0PowerConsumption get data points2 o k body data items0 power consumption
swagger:model GetDataPoints2OKBodyDataItems0PowerConsumption
*/
type GetDataPoints2OKBodyDataItems0PowerConsumption struct {

	// power
	// Example: 22636
	Power int64 `json:"power,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power consumption
func (o *GetDataPoints2OKBodyDataItems0PowerConsumption) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 power consumption based on context it is used
func (o *GetDataPoints2OKBodyDataItems0PowerConsumption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerConsumption) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerConsumption) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0PowerConsumption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0PowerGrid get data points2 o k body data items0 power grid
swagger:model GetDataPoints2OKBodyDataItems0PowerGrid
*/
type GetDataPoints2OKBodyDataItems0PowerGrid struct {

	// current
	// Example: 98.1
	Current float64 `json:"current,omitempty"`

	// frequency
	// Example: 49.25
	Frequency float64 `json:"frequency,omitempty"`

	// power
	// Example: 19821
	Power int64 `json:"power,omitempty"`

	// voltage
	// Example: 128.3
	Voltage float64 `json:"voltage,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power grid
func (o *GetDataPoints2OKBodyDataItems0PowerGrid) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 power grid based on context it is used
func (o *GetDataPoints2OKBodyDataItems0PowerGrid) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerGrid) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerGrid) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0PowerGrid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0PowerInverter get data points2 o k body data items0 power inverter
swagger:model GetDataPoints2OKBodyDataItems0PowerInverter
*/
type GetDataPoints2OKBodyDataItems0PowerInverter struct {

	// eps power
	// Example: 24672
	EpsPower int64 `json:"eps_power,omitempty"`

	// output frequency
	// Example: 49.69
	OutputFrequency float64 `json:"output_frequency,omitempty"`

	// output voltage
	// Example: 144.7
	OutputVoltage float64 `json:"output_voltage,omitempty"`

	// power
	// Example: -9476
	Power int64 `json:"power,omitempty"`

	// temperature
	// Example: 50
	Temperature float64 `json:"temperature,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power inverter
func (o *GetDataPoints2OKBodyDataItems0PowerInverter) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 power inverter based on context it is used
func (o *GetDataPoints2OKBodyDataItems0PowerInverter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerInverter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerInverter) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0PowerInverter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0PowerSolar get data points2 o k body data items0 power solar
swagger:model GetDataPoints2OKBodyDataItems0PowerSolar
*/
type GetDataPoints2OKBodyDataItems0PowerSolar struct {

	// arrays
	// Example: [{"array":1,"current":3.3,"power":491,"voltage":198.6},{"array":2,"current":10,"power":2806,"voltage":170.8}]
	Arrays []*GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0 `json:"arrays"`

	// power
	// Example: 4703
	Power int64 `json:"power,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power solar
func (o *GetDataPoints2OKBodyDataItems0PowerSolar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateArrays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0PowerSolar) validateArrays(formats strfmt.Registry) error {
	if swag.IsZero(o.Arrays) { // not required
		return nil
	}

	for i := 0; i < len(o.Arrays); i++ {
		if swag.IsZero(o.Arrays[i]) { // not required
			continue
		}

		if o.Arrays[i] != nil {
			if err := o.Arrays[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("power" + "." + "solar" + "." + "arrays" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("power" + "." + "solar" + "." + "arrays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get data points2 o k body data items0 power solar based on the context it is used
func (o *GetDataPoints2OKBodyDataItems0PowerSolar) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateArrays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0PowerSolar) contextValidateArrays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Arrays); i++ {

		if o.Arrays[i] != nil {
			if err := o.Arrays[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("power" + "." + "solar" + "." + "arrays" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("power" + "." + "solar" + "." + "arrays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerSolar) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerSolar) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0PowerSolar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0 get data points2 o k body data items0 power solar arrays items0
swagger:model GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0
*/
type GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0 struct {

	// array
	// Example: 1
	Array int64 `json:"array,omitempty"`

	// current
	// Example: 3.3
	Current float64 `json:"current,omitempty"`

	// power
	// Example: 491
	Power int64 `json:"power,omitempty"`

	// voltage
	// Example: 198.6
	Voltage float64 `json:"voltage,omitempty"`
}

// Validate validates this get data points2 o k body data items0 power solar arrays items0
func (o *GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 power solar arrays items0 based on context it is used
func (o *GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0PowerSolarArraysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0Today get data points2 o k body data items0 today
swagger:model GetDataPoints2OKBodyDataItems0Today
*/
type GetDataPoints2OKBodyDataItems0Today struct {

	// ac charge
	// Example: 8021.5
	AcCharge float64 `json:"ac_charge,omitempty"`

	// battery
	Battery *GetDataPoints2OKBodyDataItems0TodayBattery `json:"battery,omitempty"`

	// consumption
	// Example: 5673.7
	Consumption float64 `json:"consumption,omitempty"`

	// grid
	Grid *GetDataPoints2OKBodyDataItems0TodayGrid `json:"grid,omitempty"`

	// solar
	// Example: 4373.9
	Solar float64 `json:"solar,omitempty"`
}

// Validate validates this get data points2 o k body data items0 today
func (o *GetDataPoints2OKBodyDataItems0Today) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Today) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(o.Battery) { // not required
		return nil
	}

	if o.Battery != nil {
		if err := o.Battery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("today" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("today" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Today) validateGrid(formats strfmt.Registry) error {
	if swag.IsZero(o.Grid) { // not required
		return nil
	}

	if o.Grid != nil {
		if err := o.Grid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("today" + "." + "grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("today" + "." + "grid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get data points2 o k body data items0 today based on the context it is used
func (o *GetDataPoints2OKBodyDataItems0Today) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGrid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Today) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if o.Battery != nil {
		if err := o.Battery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("today" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("today" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Today) contextValidateGrid(ctx context.Context, formats strfmt.Registry) error {

	if o.Grid != nil {
		if err := o.Grid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("today" + "." + "grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("today" + "." + "grid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0Today) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0Today) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0Today
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0TodayBattery get data points2 o k body data items0 today battery
swagger:model GetDataPoints2OKBodyDataItems0TodayBattery
*/
type GetDataPoints2OKBodyDataItems0TodayBattery struct {

	// charge
	// Example: 8691.3
	Charge float64 `json:"charge,omitempty"`

	// discharge
	// Example: 4350.4
	Discharge float64 `json:"discharge,omitempty"`
}

// Validate validates this get data points2 o k body data items0 today battery
func (o *GetDataPoints2OKBodyDataItems0TodayBattery) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 today battery based on context it is used
func (o *GetDataPoints2OKBodyDataItems0TodayBattery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TodayBattery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TodayBattery) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0TodayBattery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0TodayGrid get data points2 o k body data items0 today grid
swagger:model GetDataPoints2OKBodyDataItems0TodayGrid
*/
type GetDataPoints2OKBodyDataItems0TodayGrid struct {

	// export
	// Example: 5384.4
	Export float64 `json:"export,omitempty"`

	// import
	// Example: 3168.4
	Import float64 `json:"import,omitempty"`
}

// Validate validates this get data points2 o k body data items0 today grid
func (o *GetDataPoints2OKBodyDataItems0TodayGrid) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 today grid based on context it is used
func (o *GetDataPoints2OKBodyDataItems0TodayGrid) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TodayGrid) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TodayGrid) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0TodayGrid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0Total get data points2 o k body data items0 total
swagger:model GetDataPoints2OKBodyDataItems0Total
*/
type GetDataPoints2OKBodyDataItems0Total struct {

	// ac charge
	// Example: 9568.8
	AcCharge float64 `json:"ac_charge,omitempty"`

	// battery
	Battery *GetDataPoints2OKBodyDataItems0TotalBattery `json:"battery,omitempty"`

	// consumption
	// Example: 7757.1
	Consumption float64 `json:"consumption,omitempty"`

	// grid
	Grid *GetDataPoints2OKBodyDataItems0TotalGrid `json:"grid,omitempty"`

	// solar
	// Example: 4353.3
	Solar float64 `json:"solar,omitempty"`
}

// Validate validates this get data points2 o k body data items0 total
func (o *GetDataPoints2OKBodyDataItems0Total) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Total) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(o.Battery) { // not required
		return nil
	}

	if o.Battery != nil {
		if err := o.Battery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Total) validateGrid(formats strfmt.Registry) error {
	if swag.IsZero(o.Grid) { // not required
		return nil
	}

	if o.Grid != nil {
		if err := o.Grid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total" + "." + "grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total" + "." + "grid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get data points2 o k body data items0 total based on the context it is used
func (o *GetDataPoints2OKBodyDataItems0Total) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGrid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Total) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if o.Battery != nil {
		if err := o.Battery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total" + "." + "battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total" + "." + "battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetDataPoints2OKBodyDataItems0Total) contextValidateGrid(ctx context.Context, formats strfmt.Registry) error {

	if o.Grid != nil {
		if err := o.Grid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total" + "." + "grid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total" + "." + "grid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0Total) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0Total) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0Total
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0TotalBattery get data points2 o k body data items0 total battery
swagger:model GetDataPoints2OKBodyDataItems0TotalBattery
*/
type GetDataPoints2OKBodyDataItems0TotalBattery struct {

	// charge
	// Example: 1034.1
	Charge float64 `json:"charge,omitempty"`

	// discharge
	// Example: 1034.1
	Discharge float64 `json:"discharge,omitempty"`
}

// Validate validates this get data points2 o k body data items0 total battery
func (o *GetDataPoints2OKBodyDataItems0TotalBattery) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 total battery based on context it is used
func (o *GetDataPoints2OKBodyDataItems0TotalBattery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TotalBattery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TotalBattery) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0TotalBattery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPoints2OKBodyDataItems0TotalGrid get data points2 o k body data items0 total grid
swagger:model GetDataPoints2OKBodyDataItems0TotalGrid
*/
type GetDataPoints2OKBodyDataItems0TotalGrid struct {

	// export
	// Example: 7045.8
	Export float64 `json:"export,omitempty"`

	// import
	// Example: 4625.8
	Import float64 `json:"import,omitempty"`
}

// Validate validates this get data points2 o k body data items0 total grid
func (o *GetDataPoints2OKBodyDataItems0TotalGrid) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points2 o k body data items0 total grid based on context it is used
func (o *GetDataPoints2OKBodyDataItems0TotalGrid) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TotalGrid) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPoints2OKBodyDataItems0TotalGrid) UnmarshalBinary(b []byte) error {
	var res GetDataPoints2OKBodyDataItems0TotalGrid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
