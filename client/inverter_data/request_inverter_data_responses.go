// Code generated by go-swagger; DO NOT EDIT.

package inverter_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RequestInverterDataReader is a Reader for the RequestInverterData structure.
type RequestInverterDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestInverterDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestInverterDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /inverter/{inverter_serial_number}/request-data] requestInverterData", response, response.Code())
	}
}

// NewRequestInverterDataOK creates a RequestInverterDataOK with default headers values
func NewRequestInverterDataOK() *RequestInverterDataOK {
	return &RequestInverterDataOK{}
}

/*
RequestInverterDataOK describes a response with status code 200, with default header values.

failure
*/
type RequestInverterDataOK struct {
	Payload *RequestInverterDataOKBody
}

// IsSuccess returns true when this request inverter data o k response has a 2xx status code
func (o *RequestInverterDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request inverter data o k response has a 3xx status code
func (o *RequestInverterDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request inverter data o k response has a 4xx status code
func (o *RequestInverterDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this request inverter data o k response has a 5xx status code
func (o *RequestInverterDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this request inverter data o k response a status code equal to that given
func (o *RequestInverterDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the request inverter data o k response
func (o *RequestInverterDataOK) Code() int {
	return 200
}

func (o *RequestInverterDataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inverter/{inverter_serial_number}/request-data][%d] requestInverterDataOK %s", 200, payload)
}

func (o *RequestInverterDataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /inverter/{inverter_serial_number}/request-data][%d] requestInverterDataOK %s", 200, payload)
}

func (o *RequestInverterDataOK) GetPayload() *RequestInverterDataOKBody {
	return o.Payload
}

func (o *RequestInverterDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RequestInverterDataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RequestInverterDataOKBody request inverter data o k body
// Example: {"success":false}
swagger:model RequestInverterDataOKBody
*/
type RequestInverterDataOKBody struct {

	// success
	// Example: false
	Success bool `json:"success,omitempty"`
}

// Validate validates this request inverter data o k body
func (o *RequestInverterDataOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this request inverter data o k body based on context it is used
func (o *RequestInverterDataOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RequestInverterDataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RequestInverterDataOKBody) UnmarshalBinary(b []byte) error {
	var res RequestInverterDataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
