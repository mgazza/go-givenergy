// Code generated by go-swagger; DO NOT EDIT.

package smart_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetSmartDeviceByIDReader is a Reader for the GetSmartDeviceByID structure.
type GetSmartDeviceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSmartDeviceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSmartDeviceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSmartDeviceByIDOK creates a GetSmartDeviceByIDOK with default headers values
func NewGetSmartDeviceByIDOK() *GetSmartDeviceByIDOK {
	return &GetSmartDeviceByIDOK{}
}

/*
GetSmartDeviceByIDOK describes a response with status code 200, with default header values.

GetSmartDeviceByIDOK get smart device by Id o k
*/
type GetSmartDeviceByIDOK struct {
	Payload *GetSmartDeviceByIDOKBody
}

// IsSuccess returns true when this get smart device by Id o k response has a 2xx status code
func (o *GetSmartDeviceByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get smart device by Id o k response has a 3xx status code
func (o *GetSmartDeviceByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get smart device by Id o k response has a 4xx status code
func (o *GetSmartDeviceByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get smart device by Id o k response has a 5xx status code
func (o *GetSmartDeviceByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get smart device by Id o k response a status code equal to that given
func (o *GetSmartDeviceByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get smart device by Id o k response
func (o *GetSmartDeviceByIDOK) Code() int {
	return 200
}

func (o *GetSmartDeviceByIDOK) Error() string {
	return fmt.Sprintf("[GET /smart-device/{smartDevice_uuid}][%d] getSmartDeviceByIdOK  %+v", 200, o.Payload)
}

func (o *GetSmartDeviceByIDOK) String() string {
	return fmt.Sprintf("[GET /smart-device/{smartDevice_uuid}][%d] getSmartDeviceByIdOK  %+v", 200, o.Payload)
}

func (o *GetSmartDeviceByIDOK) GetPayload() *GetSmartDeviceByIDOKBody {
	return o.Payload
}

func (o *GetSmartDeviceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSmartDeviceByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetSmartDeviceByIDOKBody get smart device by ID o k body
// Example: {"data":[{"alias":"ipsum","other_data":{"graph_color":"#b8e6b1","hardware_id":"H","local_key":"y"},"uuid":"8d4277f4-ff6e-4a4c-a90e-fef022276270"},{"alias":"fugit","other_data":{"graph_color":"#7eb1cc","hardware_id":",","local_key":"^"},"uuid":"4cce11a8-e496-43de-ac57-9fdb71044137"}]}
swagger:model GetSmartDeviceByIDOKBody
*/
type GetSmartDeviceByIDOKBody struct {

	// data
	// Example: [{"alias":"ipsum","other_data":{"graph_color":"#b8e6b1","hardware_id":"H","local_key":"y"},"uuid":"8d4277f4-ff6e-4a4c-a90e-fef022276270"},{"alias":"fugit","other_data":{"graph_color":"#7eb1cc","hardware_id":",","local_key":"^"},"uuid":"4cce11a8-e496-43de-ac57-9fdb71044137"}]
	Data []*GetSmartDeviceByIDOKBodyDataItems0 `json:"data"`
}

// Validate validates this get smart device by ID o k body
func (o *GetSmartDeviceByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSmartDeviceByIDOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSmartDeviceByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSmartDeviceByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get smart device by ID o k body based on the context it is used
func (o *GetSmartDeviceByIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSmartDeviceByIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSmartDeviceByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSmartDeviceByIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSmartDeviceByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSmartDeviceByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetSmartDeviceByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSmartDeviceByIDOKBodyDataItems0 get smart device by ID o k body data items0
swagger:model GetSmartDeviceByIDOKBodyDataItems0
*/
type GetSmartDeviceByIDOKBodyDataItems0 struct {

	// alias
	// Example: ipsum
	Alias string `json:"alias,omitempty"`

	// other data
	OtherData *GetSmartDeviceByIDOKBodyDataItems0OtherData `json:"other_data,omitempty"`

	// uuid
	// Example: 8d4277f4-ff6e-4a4c-a90e-fef022276270
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this get smart device by ID o k body data items0
func (o *GetSmartDeviceByIDOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOtherData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSmartDeviceByIDOKBodyDataItems0) validateOtherData(formats strfmt.Registry) error {
	if swag.IsZero(o.OtherData) { // not required
		return nil
	}

	if o.OtherData != nil {
		if err := o.OtherData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("other_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get smart device by ID o k body data items0 based on the context it is used
func (o *GetSmartDeviceByIDOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOtherData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSmartDeviceByIDOKBodyDataItems0) contextValidateOtherData(ctx context.Context, formats strfmt.Registry) error {

	if o.OtherData != nil {
		if err := o.OtherData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("other_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSmartDeviceByIDOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSmartDeviceByIDOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetSmartDeviceByIDOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSmartDeviceByIDOKBodyDataItems0OtherData get smart device by ID o k body data items0 other data
swagger:model GetSmartDeviceByIDOKBodyDataItems0OtherData
*/
type GetSmartDeviceByIDOKBodyDataItems0OtherData struct {

	// graph color
	// Example: #b8e6b1
	GraphColor string `json:"graph_color,omitempty"`

	// hardware id
	// Example: H
	HardwareID string `json:"hardware_id,omitempty"`

	// local key
	// Example: y
	LocalKey string `json:"local_key,omitempty"`
}

// Validate validates this get smart device by ID o k body data items0 other data
func (o *GetSmartDeviceByIDOKBodyDataItems0OtherData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get smart device by ID o k body data items0 other data based on context it is used
func (o *GetSmartDeviceByIDOKBodyDataItems0OtherData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSmartDeviceByIDOKBodyDataItems0OtherData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSmartDeviceByIDOKBodyDataItems0OtherData) UnmarshalBinary(b []byte) error {
	var res GetSmartDeviceByIDOKBodyDataItems0OtherData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
