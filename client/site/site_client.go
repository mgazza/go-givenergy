// Code generated by go-swagger; DO NOT EDIT.

package site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new site API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for site API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetSingleSiteByID(params *GetSingleSiteByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSingleSiteByIDOK, error)

	GetSiteStatus(params *GetSiteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteStatusOK, error)

	GetYourSites(params *GetYourSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYourSitesOK, error)

	UpdateSiteStatus(params *UpdateSiteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSiteStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetSingleSiteByID gets single site by ID

Gather a single site's information
*/
func (a *Client) GetSingleSiteByID(params *GetSingleSiteByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSingleSiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleSiteByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSingleSiteByID",
		Method:             "GET",
		PathPattern:        "/site/{site_plant_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleSiteByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSingleSiteByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSingleSiteByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSiteStatus gets site status
*/
func (a *Client) GetSiteStatus(params *GetSiteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSiteStatus",
		Method:             "GET",
		PathPattern:        "/site/{site_plant_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSiteStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYourSites gets your sites

Retrieves a list of your sites
*/
func (a *Client) GetYourSites(params *GetYourSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYourSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYourSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getYourSites",
		Method:             "GET",
		PathPattern:        "/site",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetYourSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYourSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getYourSites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateSiteStatus updates site status

	Update the status of a site. Provide a status of `null` to delete the status.

Modifying the site status will automatically perform any modifications to any hardware on that site as required.
*/
func (a *Client) UpdateSiteStatus(params *UpdateSiteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSiteStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSiteStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSiteStatus",
		Method:             "POST",
		PathPattern:        "/site/{site_plant_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSiteStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSiteStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSiteStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
