// Code generated by go-swagger; DO NOT EDIT.

package site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSingleSiteByIDParams creates a new GetSingleSiteByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSingleSiteByIDParams() *GetSingleSiteByIDParams {
	return &GetSingleSiteByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSingleSiteByIDParamsWithTimeout creates a new GetSingleSiteByIDParams object
// with the ability to set a timeout on a request.
func NewGetSingleSiteByIDParamsWithTimeout(timeout time.Duration) *GetSingleSiteByIDParams {
	return &GetSingleSiteByIDParams{
		timeout: timeout,
	}
}

// NewGetSingleSiteByIDParamsWithContext creates a new GetSingleSiteByIDParams object
// with the ability to set a context for a request.
func NewGetSingleSiteByIDParamsWithContext(ctx context.Context) *GetSingleSiteByIDParams {
	return &GetSingleSiteByIDParams{
		Context: ctx,
	}
}

// NewGetSingleSiteByIDParamsWithHTTPClient creates a new GetSingleSiteByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSingleSiteByIDParamsWithHTTPClient(client *http.Client) *GetSingleSiteByIDParams {
	return &GetSingleSiteByIDParams{
		HTTPClient: client,
	}
}

/*
GetSingleSiteByIDParams contains all the parameters to send to the API endpoint

	for the get single site by ID operation.

	Typically these are written to a http.Request.
*/
type GetSingleSiteByIDParams struct {

	// Authorization.
	Authorization *string

	/* SitePlantID.

	   The ID of the site plant.
	*/
	SitePlantID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get single site by ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSingleSiteByIDParams) WithDefaults() *GetSingleSiteByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get single site by ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSingleSiteByIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get single site by ID params
func (o *GetSingleSiteByIDParams) WithTimeout(timeout time.Duration) *GetSingleSiteByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get single site by ID params
func (o *GetSingleSiteByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get single site by ID params
func (o *GetSingleSiteByIDParams) WithContext(ctx context.Context) *GetSingleSiteByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get single site by ID params
func (o *GetSingleSiteByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get single site by ID params
func (o *GetSingleSiteByIDParams) WithHTTPClient(client *http.Client) *GetSingleSiteByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get single site by ID params
func (o *GetSingleSiteByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get single site by ID params
func (o *GetSingleSiteByIDParams) WithAuthorization(authorization *string) *GetSingleSiteByIDParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get single site by ID params
func (o *GetSingleSiteByIDParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithSitePlantID adds the sitePlantID to the get single site by ID params
func (o *GetSingleSiteByIDParams) WithSitePlantID(sitePlantID int64) *GetSingleSiteByIDParams {
	o.SetSitePlantID(sitePlantID)
	return o
}

// SetSitePlantID adds the sitePlantId to the get single site by ID params
func (o *GetSingleSiteByIDParams) SetSitePlantID(sitePlantID int64) {
	o.SitePlantID = sitePlantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSingleSiteByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}
	}

	// path param site_plant_id
	if err := r.SetPathParam("site_plant_id", swag.FormatInt64(o.SitePlantID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
