// Code generated by go-swagger; DO NOT EDIT.

package energy_flow_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEnergyFlowDataReader is a Reader for the GetEnergyFlowData structure.
type GetEnergyFlowDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEnergyFlowDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEnergyFlowDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /inverter/{inverter_serial_number}/energy-flows] getEnergyFlowData", response, response.Code())
	}
}

// NewGetEnergyFlowDataOK creates a GetEnergyFlowDataOK with default headers values
func NewGetEnergyFlowDataOK() *GetEnergyFlowDataOK {
	return &GetEnergyFlowDataOK{}
}

/*
GetEnergyFlowDataOK describes a response with status code 200, with default header values.

GetEnergyFlowDataOK get energy flow data o k
*/
type GetEnergyFlowDataOK struct {
	Payload string
}

// IsSuccess returns true when this get energy flow data o k response has a 2xx status code
func (o *GetEnergyFlowDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get energy flow data o k response has a 3xx status code
func (o *GetEnergyFlowDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get energy flow data o k response has a 4xx status code
func (o *GetEnergyFlowDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get energy flow data o k response has a 5xx status code
func (o *GetEnergyFlowDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get energy flow data o k response a status code equal to that given
func (o *GetEnergyFlowDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get energy flow data o k response
func (o *GetEnergyFlowDataOK) Code() int {
	return 200
}

func (o *GetEnergyFlowDataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/energy-flows][%d] getEnergyFlowDataOK %s", 200, payload)
}

func (o *GetEnergyFlowDataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inverter/{inverter_serial_number}/energy-flows][%d] getEnergyFlowDataOK %s", 200, payload)
}

func (o *GetEnergyFlowDataOK) GetPayload() string {
	return o.Payload
}

func (o *GetEnergyFlowDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetEnergyFlowDataBody get energy flow data body
swagger:model GetEnergyFlowDataBody
*/
type GetEnergyFlowDataBody struct {

	// The end time of the query. Based on the inverter's local time
	// Example: 2022-01-01
	// Required: true
	EndTime *string `json:"end_time"`

	// The way in which to group the data. See the above table for a complete list of grouping IDs
	// Example: 0
	// Required: true
	Grouping *int64 `json:"grouping"`

	// The start time of the query. Based on the inverter's local time
	// Example: 2022-01-01
	// Required: true
	StartTime *string `json:"start_time"`

	// An array of type IDs. See the above table for a complete list of type IDs. Leave blank to fetch all types
	// Example: [0,1,2,5]
	Types []int64 `json:"types"`
}

// Validate validates this get energy flow data body
func (o *GetEnergyFlowDataBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrouping(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEnergyFlowDataBody) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"end_time", "body", o.EndTime); err != nil {
		return err
	}

	return nil
}

func (o *GetEnergyFlowDataBody) validateGrouping(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"grouping", "body", o.Grouping); err != nil {
		return err
	}

	return nil
}

func (o *GetEnergyFlowDataBody) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"start_time", "body", o.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get energy flow data body based on context it is used
func (o *GetEnergyFlowDataBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEnergyFlowDataBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEnergyFlowDataBody) UnmarshalBinary(b []byte) error {
	var res GetEnergyFlowDataBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
