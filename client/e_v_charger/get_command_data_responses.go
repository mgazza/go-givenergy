// Code generated by go-swagger; DO NOT EDIT.

package e_v_charger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetCommandDataReader is a Reader for the GetCommandData structure.
type GetCommandDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCommandDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCommandDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCommandDataOK creates a GetCommandDataOK with default headers values
func NewGetCommandDataOK() *GetCommandDataOK {
	return &GetCommandDataOK{}
}

/*
GetCommandDataOK describes a response with status code 200, with default header values.

GetCommandDataOK get command data o k
*/
type GetCommandDataOK struct {
	Payload *GetCommandDataOKBody
}

// IsSuccess returns true when this get command data o k response has a 2xx status code
func (o *GetCommandDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get command data o k response has a 3xx status code
func (o *GetCommandDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get command data o k response has a 4xx status code
func (o *GetCommandDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get command data o k response has a 5xx status code
func (o *GetCommandDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get command data o k response a status code equal to that given
func (o *GetCommandDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get command data o k response
func (o *GetCommandDataOK) Code() int {
	return 200
}

func (o *GetCommandDataOK) Error() string {
	return fmt.Sprintf("[GET /ev-charger/{charger_uuid}/commands/{command_id}][%d] getCommandDataOK  %+v", 200, o.Payload)
}

func (o *GetCommandDataOK) String() string {
	return fmt.Sprintf("[GET /ev-charger/{charger_uuid}/commands/{command_id}][%d] getCommandDataOK  %+v", 200, o.Payload)
}

func (o *GetCommandDataOK) GetPayload() *GetCommandDataOKBody {
	return o.Payload
}

func (o *GetCommandDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCommandDataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCommandDataOKBody get command data o k body
// Example: {"data":{"active":"EcoPlus","available":["Eco","EcoPlus","Boost"]}}
swagger:model GetCommandDataOKBody
*/
type GetCommandDataOKBody struct {

	// data
	Data *GetCommandDataOKBodyData `json:"data,omitempty"`
}

// Validate validates this get command data o k body
func (o *GetCommandDataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommandDataOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommandDataOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommandDataOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get command data o k body based on the context it is used
func (o *GetCommandDataOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommandDataOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCommandDataOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCommandDataOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommandDataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommandDataOKBody) UnmarshalBinary(b []byte) error {
	var res GetCommandDataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCommandDataOKBodyData get command data o k body data
swagger:model GetCommandDataOKBodyData
*/
type GetCommandDataOKBodyData struct {

	// active
	// Example: EcoPlus
	Active string `json:"active,omitempty"`

	// available
	// Example: ["Eco","EcoPlus","Boost"]
	Available []string `json:"available"`
}

// Validate validates this get command data o k body data
func (o *GetCommandDataOKBodyData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get command data o k body data based on context it is used
func (o *GetCommandDataOKBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCommandDataOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommandDataOKBodyData) UnmarshalBinary(b []byte) error {
	var res GetCommandDataOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
