// Code generated by go-swagger; DO NOT EDIT.

package e_v_charger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDataPointsReader is a Reader for the GetDataPoints structure.
type GetDataPointsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataPointsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataPointsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDataPointsOK creates a GetDataPointsOK with default headers values
func NewGetDataPointsOK() *GetDataPointsOK {
	return &GetDataPointsOK{}
}

/*
GetDataPointsOK describes a response with status code 200, with default header values.

GetDataPointsOK get data points o k
*/
type GetDataPointsOK struct {
	Payload *GetDataPointsOKBody
}

// IsSuccess returns true when this get data points o k response has a 2xx status code
func (o *GetDataPointsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get data points o k response has a 3xx status code
func (o *GetDataPointsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get data points o k response has a 4xx status code
func (o *GetDataPointsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get data points o k response has a 5xx status code
func (o *GetDataPointsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get data points o k response a status code equal to that given
func (o *GetDataPointsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get data points o k response
func (o *GetDataPointsOK) Code() int {
	return 200
}

func (o *GetDataPointsOK) Error() string {
	return fmt.Sprintf("[GET /ev-charger/{charger_uuid}/meter-data][%d] getDataPointsOK  %+v", 200, o.Payload)
}

func (o *GetDataPointsOK) String() string {
	return fmt.Sprintf("[GET /ev-charger/{charger_uuid}/meter-data][%d] getDataPointsOK  %+v", 200, o.Payload)
}

func (o *GetDataPointsOK) GetPayload() *GetDataPointsOKBody {
	return o.Payload
}

func (o *GetDataPointsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDataPointsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDataPointsOKBody get data points o k body
// Example: {"data":[{"measurements":[{"measurand":13,"unit":4,"value":1145},{"measurand":11,"unit":null,"value":50.2},{"measurand":21,"unit":11,"value":230.5}],"meter_id":0,"timestamp":"2023-06-01 08:00:00"}]}
swagger:model GetDataPointsOKBody
*/
type GetDataPointsOKBody struct {

	// data
	// Example: [{"measurements":[{"measurand":13,"unit":4,"value":1145},{"measurand":11,"unit":null,"value":50.2},{"measurand":21,"unit":11,"value":230.5}],"meter_id":0,"timestamp":"2023-06-01 08:00:00"}]
	Data []*GetDataPointsOKBodyDataItems0 `json:"data"`
}

// Validate validates this get data points o k body
func (o *GetDataPointsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPointsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDataPointsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDataPointsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get data points o k body based on the context it is used
func (o *GetDataPointsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPointsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDataPointsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDataPointsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPointsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPointsOKBody) UnmarshalBinary(b []byte) error {
	var res GetDataPointsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPointsOKBodyDataItems0 get data points o k body data items0
swagger:model GetDataPointsOKBodyDataItems0
*/
type GetDataPointsOKBodyDataItems0 struct {

	// measurements
	// Example: [{"measurand":13,"unit":4,"value":1145},{"measurand":11,"unit":null,"value":50.2},{"measurand":21,"unit":11,"value":230.5}]
	Measurements []*GetDataPointsOKBodyDataItems0MeasurementsItems0 `json:"measurements"`

	// meter id
	// Example: 0
	MeterID int64 `json:"meter_id,omitempty"`

	// timestamp
	// Example: 2023-06-01 08:00:00
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this get data points o k body data items0
func (o *GetDataPointsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMeasurements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPointsOKBodyDataItems0) validateMeasurements(formats strfmt.Registry) error {
	if swag.IsZero(o.Measurements) { // not required
		return nil
	}

	for i := 0; i < len(o.Measurements); i++ {
		if swag.IsZero(o.Measurements[i]) { // not required
			continue
		}

		if o.Measurements[i] != nil {
			if err := o.Measurements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("measurements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("measurements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get data points o k body data items0 based on the context it is used
func (o *GetDataPointsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMeasurements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDataPointsOKBodyDataItems0) contextValidateMeasurements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Measurements); i++ {

		if o.Measurements[i] != nil {
			if err := o.Measurements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("measurements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("measurements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPointsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPointsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetDataPointsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDataPointsOKBodyDataItems0MeasurementsItems0 get data points o k body data items0 measurements items0
swagger:model GetDataPointsOKBodyDataItems0MeasurementsItems0
*/
type GetDataPointsOKBodyDataItems0MeasurementsItems0 struct {

	// measurand
	// Example: 13
	Measurand int64 `json:"measurand,omitempty"`

	// unit
	// Example: 4
	Unit int64 `json:"unit,omitempty"`

	// value
	// Example: 1145
	Value float64 `json:"value,omitempty"`
}

// Validate validates this get data points o k body data items0 measurements items0
func (o *GetDataPointsOKBodyDataItems0MeasurementsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get data points o k body data items0 measurements items0 based on context it is used
func (o *GetDataPointsOKBodyDataItems0MeasurementsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDataPointsOKBodyDataItems0MeasurementsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDataPointsOKBodyDataItems0MeasurementsItems0) UnmarshalBinary(b []byte) error {
	var res GetDataPointsOKBodyDataItems0MeasurementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
